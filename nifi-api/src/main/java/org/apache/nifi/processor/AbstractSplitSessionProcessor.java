/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.nifi.processor;

import org.apache.nifi.processor.exception.ProcessException;

public abstract class AbstractSplitSessionProcessor extends AbstractSessionFactoryProcessor {

    @Override
    public final void onTrigger(final ProcessContext context, final ProcessSessionFactory sessionFactory) throws ProcessException {
        final ProcessSession input = sessionFactory.createSession();
        final ProcessSession output = sessionFactory.createSession();

        output.addPeerSession(input);
        input.addPeerSession(output);

        try {
            onTrigger(context, input, output);
            input.commit();
            output.commit();
        } catch (final Throwable t) {
            input.rollback(true);
            output.rollback();
            throw t;
        }
    }

    /**
     * This is designed to facilitate "streaming" of data based on an input flowfile. An example use case would be where
     * you have a database processor that receives its query from an input flowfile, and you want to commit batches of the result
     * set as they're immediately available to downstream processors.
     *
     * @param context The ProcessContext object
     * @param inputSession The ProcessSession used for reading input flowfiles and committing them.
     * @param outputSession The ProcessSession used for writing output flowfiles (ie flowfiles generated by this processor)
     * @throws ProcessException
     */
    public abstract void onTrigger(final ProcessContext context, final ProcessSession inputSession, final ProcessSession outputSession) throws ProcessException;
}
